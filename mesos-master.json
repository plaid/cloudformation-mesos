{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Launches a Mesos Master cluster",
  "Parameters": {
    "InstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "Default": "d2.2xlarge",
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "String"
    },
    "ClusterId": {
      "Description": "Mesos cluster ID",
      "Type": "String",
      "Default": "mesos"
    },
    "ClusterSize": {
      "Description": "Number of nodes to launch",
      "Type": "Number"
    },
    "QuorumSize": {
      "Description": "Number of masters needed for Mesos replicated log registry quorum (should be ceiling(<ClusterSize>/2))",
      "Type": "Number"
    },
    "ExhibitorDiscoveryUrl": {
      "Description": "Exhibitor URL that returns active ZooKeeper nodes ('getCluster') (e.g., http://<exhibitor_node>/exhibitor/v1/cluster/list)",
      "Type": "String"
    },
    "ZkClientSecurityGroup": {
      "Description": "Security group ID for ZK clients (should grant access to ZK nodes)",
      "Type": "String"
    },
    "DockerCredentials": {
      "Description": "JSON string to be saved as .dockercfg",
      "Type": "String",
      "Default": "{}"
    },
    "LogstashConfig": {
      "Description": "(optional) Config string for Logstash",
      "Type": "String",
      "Default": ""
    },
    "Subnets": {
      "Description": "List of VPC subnet IDs for the cluster. Must match the passed AvailabilityZones.",
      "Type": "CommaDelimitedList"
    },
    "VpcId": {
      "Description": "VPC associated with the provided subnets",
      "Type": "String"
    },
    "AvailabilityZones": {
      "Description": "(Optional) If passed, only launch nodes in these AZs (e.g., 'us-east-1a,us-east-1b'). Must match the passed Subnets.",
      "Type": "CommaDelimitedList",
      "Default": ""
    },
    "MesosAwsAccessKey": {
      "Description": "AWS Key to for Mesos",
      "Type": "String"
    },
    "MesosAwsSecretAccessKey": {
      "Description": "AWS Secret key for Mesos",
      "Type": "String"
    },
    "SecurityGroup": {
      "Description": "Security group for Mesos",
      "Type": "String"
    },
    "ClusterSize": {
      "Description": "Number of master nodes to launch",
      "Type": "Number",
      "Default": "1"
    },
    "QuorumSize": {
      "Description": "Number of masters needed for Mesos replicated log registry quorum (should be ceiling(<MasterInstanceCount>/2))",
      "Type": "Number",
      "Default": "1"
    },
    "ClusterId": {
      "Description": "Mesos cluster ID",
      "Type": "String",
      "Default": "mesos"
    }
  },
  "Conditions": {
    "EnableLogstashCondition": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "LogstashConfig"
            },
            ""
          ]
        }
      ]
    },
    "UseAllAvailabilityZones": {
      "Fn::Equals": [
        {
          "Fn::Join": [
            "",
            {
              "Ref": "AvailabilityZones"
            }
          ]
        },
        ""
      ]
    }
  },
  "Resources": {
    "WaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },
    "ServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": {
          "Fn::If": [
            "UseAllAvailabilityZones",
            {
              "Fn::GetAZs": ""
            },
            {
              "Ref": "AvailabilityZones"
            }
          ]
        },
        "LaunchConfigurationName": {
          "Ref": "LaunchConfig"
        },
        "MinSize": {
          "Ref": "ClusterSize"
        },
        "MaxSize": {
          "Ref": "ClusterSize"
        },
        "DesiredCapacity": {
          "Ref": "ClusterSize"
        },
        "VPCZoneIdentifier": {
          "Ref": "Subnets"
        },
        "Tags": [
          {
            "Key": "role",
            "Value": "mesos-master",
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "/usr/local/bin/zk-list-nodes": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash -e\n",
                      "curl -s {{zk_discovery_url}} | python -c '",
                      "import sys, json;",
                      "j=json.load(sys.stdin);",
                      "servers=[\":\".join([s, str(j[\"port\"])]) for s in j[\"servers\"]];",
                      "print \",\".join(servers)'"
                    ]
                  ]
                },
                "context": {
                  "zk_discovery_url": {
                    "Ref": "ExhibitorDiscoveryUrl"
                  }
                },
                "mode": "000755",
                "owner": "root",
                "group": "root"
              },
              "/usr/local/bin/configure-mesos-master": {
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "#!/bin/bash -e",
                      "echo \"zk://`/usr/local/bin/zk-list-nodes`/{{mesos_cluster_id}}\" > /etc/sv/mesos-master/env/MESOS_ZK",
                      "echo \"`/usr/bin/ec2metadata --public-hostname`\" > /etc/sv/mesos-master/env/MESOS_HOSTNAME",
                      "echo \"{{mesos_quorum}}\" > /etc/sv/mesos-master/env/MESOS_QUORUM"
                    ]
                  ]
                },
                "context": {
                  "mesos_cluster_id": {
                    "Ref": "ClusterId"
                  },
                  "mesos_quorum": {
                    "Ref": "QuorumSize"
                  }
                },
                "mode": "000755",
                "owner": "root",
                "group": "root"
              },
              "/etc/cron.d/mesos": {
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "# Refresh mesos config every minute, but don't restart",
                      "* * * * * root /usr/local/bin/configure-mesos-master",
                      ""
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/root/.dockercfg": {
                "content": {
                  "Ref": "DockerCredentials"
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/default/docker": {
                "content": "DOCKER_OPTS=\"-g $(readlink -f /var/lib/docker)\"\n",
                "mode": "000644",
                "owner": "root",
                "group": "root"
              }
            }
          }
        }
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Ref": "InstanceAmi"
        },
        "SecurityGroups": [
          {
            "Ref": "SecurityGroup"
          },
          {
            "Ref": "ZkClientSecurityGroup"
          }
        ],
        "AssociatePublicIpAddress": "true",
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -ex\n",
                "# Helper function\n",
                "function error_exit\n",
                "{\n",
                "  cfn-signal -e 1 -r \"$1\" '",
                {
                  "Ref": "WaitHandle"
                },
                "'\n",
                "  exit 1\n",
                "}\n",
                "# Process CloudFormation init definitions\n",
                "cfn-init -s ",
                {
                  "Ref": "AWS::StackName"
                },
                " -r LaunchConfig ",
                "    --access-key ",
                {
                  "Ref": "MesosAwsAccessKey"
                },
                "    --secret-key ",
                {
                  "Ref": "MesosAwsSecretAccessKey"
                },
                "    --region ",
                {
                  "Ref": "AWS::Region"
                },
                " || error_exit 'Failed to run cfn-init'\n",
                "# Move docker dir to bigger device\n",
                "service docker stop\n",
                "mv /var/lib/docker /mnt/docker\n",
                "ln -s /mnt/docker /var/lib/docker\n",
                "service docker start\n",
                {
                  "Fn::If": [
                    "EnableLogstashCondition",
                    {
                      "Fn::Join": [
                        "",
                        [
                          "echo '",
                          {
                            "Ref": "LogstashConfig"
                          },
                          "' > /opt/logstash/logstash.conf\n",
                          "runit-service create logstash '/opt/logstash/bin/logstash -f /opt/logstash/logstash.conf'\n",
                          "echo '/root' > /etc/sv/logstash/HOME\n",
                          "runit-service enable logstash\n"
                        ]
                      ]
                    },
                    ""
                  ]
                },
                "# Configure, enable, and start mesos-master\n",
                "configure-mesos-master\n",
                "runit-service enable mesos-master\n",
                "# All is well so signal success\n",
                "cfn-signal -e 0 -r \"Stack setup complete\" '",
                {
                  "Ref": "WaitHandle"
                },
                "'\n",
                "#EOF"
              ]
            ]
          }
        }
      }
    }
  },
  "Outputs": {}
}